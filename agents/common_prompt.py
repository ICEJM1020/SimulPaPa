""" 
Description: 
Author: Xucheng(Timber) Zhang
Date: 2023-12-30
""" 

# self.info = {
#     "name" : None,
#     "gender" : None,
#     "race" : None,
#     "birthday" : None,
#     "city" : None,
#     "disease" : None,
#     "description" : None,
# }
# self.add_info = {
#     "street" : None,
#     "district" : None,
#     "state" : None,
#     "zipcode" : None,
#     "education" : None,
#     "language" : None,
#     "occupation" : None
# }

def description_prompt(**kwargs):
    has_info = ""
    gene_info = ""
    for key in kwargs.keys():
        if key == "description":
            continue
        if kwargs[key]:
            has_info += f"{key}={kwargs[key]},"
        else:
            gene_info += f"{key},"

    prompt = "Generate a description from the following information: "
    prompt += has_info
    prompt += "The following information is missing and need to be generated by you, keep them realistic: "
    prompt += gene_info
    # prompt += "This year is 2023. "
    # prompt += "The income should be in dollars. "
    # prompt += "The birthday should be in the MM-DD-YYYY format. "
    # prompt += "The demographic of this person should represent the US population sample. "
    prompt += "The generated profile should match the following guidance: <"
    prompt += "{Name} is a {age} {race} {gender} living in {street}, {city}, {state}, {zipcode}. " 
    prompt += "{Pronoun} is a {occupation}"
    prompt += "{Pronoun} speaks {language}. Pronoun's education background is {education}. "
    prompt += "{Pronoun}'s date of birth is {birthday}. >"
    prompt += "\n And summarize the key information in your generation, and return in this format: "
    prompt += "{\"description\":\"\" \"name\": \"\", \"gender\": \"\", \"birthday\": \"\", \"race\": \"\", \"city\": \"\", \"disease\" : \"\", "
    prompt += "\"street\": \"\", \"district\": \"\", \"state\": \"\", \"zipcode\": \"\",\"language\": \"\", â€œeducation\":\"\", \"occupation\":\"\"}"

    return prompt